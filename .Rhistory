df.long<-melt(rbind(numPython,numHaskell,numPerl,numLibraries))
df.long
melted<-melt(rbind(numPython,numHaskell,numPerl,numLibraries))
qplot(melted)
qplot(melted)
qplot(melted$1Var1,melted$value)
require(plotrix)
install.packages("plotrix")
library(plotrix)
?multihist
??multihist
l <- list(numPython,numHaskell,numPerl,numLibraries)
l
multihist(l)
library(plotrix)
l <- list(numPython,numHaskell,numPerl,numLibraries)
multihist(l)
multhist(l)
?list
l[1]
l[[1]]
l[1] <- "Hello"
l
l <- list(numPython,numHaskell,numPerl,numLibraries)
library(plotrix)
l <- list(numPython,numHaskell,numPerl,numLibraries)
names(l) <- c("numPython","numHaskell","numPerl","numLibraries")
l
multhist(l)
library("gridExtra", lib.loc="~/R/win-library/3.3")
plot1 <- qplot(numPython)
plot2 <- qplot(numHaskell)
plot3 <- qplot(numPerl)
plot4 <- qplot(numLibraries)
grid.arrange(plot1, plot2,plot3,plot4, ncol=2)
plot4 <- qplot(,numLibraries)
plot1 <- hist(numPython)
plot1 <- qplot(numPython,geom="bar")
plot2 <- qplot(,numHaskell)
plot3 <- qplot(,numPerl)
plot4 <- qplot(,numLibraries)
grid.arrange(plot1, plot2,plot3,plot4, ncol=2)
plot1 <- qplot(numPython,geom="histogram")
plot2 <- qplot(,numHaskell)
plot3 <- qplot(,numPerl)
plot4 <- qplot(,numLibraries)
grid.arrange(plot1, plot2,plot3,plot4, ncol=2)
plot1 <- qplot(1,numPython)
plot2 <- qplot(,numHaskell)
plot3 <- qplot(,numPerl)
plot4 <- qplot(,numLibraries)
grid.arrange(plot1, plot2,plot3,plot4, ncol=2)
plot1 <- qplot(1,numPython,geom="histogram")
plot2 <- qplot(,numHaskell)
plot3 <- qplot(,numPerl)
plot4 <- qplot(,numLibraries)
grid.arrange(plot1, plot2,plot3,plot4, ncol=2)
plot1 <- qplot(1,numPython,geom="bar")
plot2 <- qplot(,numHaskell)
plot3 <- qplot(,numPerl)
grid.arrange(plot1, plot2,plot3,plot4, ncol=2)
plot4 <- qplot(,numLibraries)
print(paste0("Number of Python Files in the top 15 recent archlinux updates: "),numPython)
print(paste0("Number of Python Files in the top 15 recent archlinux updates: "),as.char(numPython))
print(paste0("Number of Python Files in the top 15 recent archlinux updates: ",numPython))
print(paste0("Number of Python Files in the top 15 recent archlinux updates: ",numPython))
print(paste0("Number of Haskell Files in the top 15 recent archlinux updates: ",numHaskell))
print(paste0("Number of Perl Files in the top 15 recent archlinux updates: ",numPerl))
print(paste0("Number of Libraries Files in the top 15 recent archlinux updates: ",numLibraries))
arch
Arch
Arch
Archurl <- read_html("https://en.wikipedia.org/wiki/Germany")
Arch1 <- html_nodes(Archurl,css=".navbox")
Arch <- html_text(Arch1)
Archurl <- read_html("https://en.wikipedia.org/wiki/Germany")
Arch1 <- html_nodes(Archurl,css=".navbox")
Arch <- html_table(Arch1)
Archurl <- read_html("https://en.wikipedia.org/wiki/Germany")
Arch1 <- html_nodes(Archurl,css=".navbox")
Arch <- html_table(Arch1,fill=T)
Archurl <- read_html("https://en.wikipedia.org/wiki/Germany")
Arch1 <- html_nodes(Archurl,css=".jquery-tablesorter td , .headerSort")
Arch <- html_table(Arch1,fill=T)
Archurl <- read_html("https://en.wikipedia.org/wiki/States_of_Germany")
Arch1 <- html_nodes(Archurl,css="td:nth-child(14) , td:nth-child(13) , td:nth-child(12) , td:nth-child(11) , td:nth-child(10) , td:nth-child(9) , td:nth-child(8) , td:nth-child(7) , td:nth-child(4) , td:nth-child(5) , td:nth-child(3) , .headerSort")
Arch <- html_table(Arch1)
Archurl <- read_html("https://en.wikipedia.org/wiki/States_of_Germany")
Arch1 <- html_nodes(Archurl,css=".unsortable , td , .headerSort")
Arch <- html_table(Arch1)
Archurl <- read_html("https://en.wikipedia.org/wiki/States_of_Germany")
Arch1 <- html_nodes(Archurl,css=".unsortable , .jquery-tablesorter td , .headerSort")
Arch <- html_table(Arch1)
Archurl <- read_html("https://en.wikipedia.org/wiki/States_of_Germany")
Arch <- html_text(Arch1)
Arch1 <- html_nodes(Archurl,css=".unsortable , .jquery-tablesorter td , .headerSort")
Archurl <- read_html("http://www.experience-germany.com/html/all_states.html")
Arch1 <- html_nodes(Archurl,css="#Tabelle35")
Arch <- html_text(Arch1)
Archurl <- read_html("http://www.experience-germany.com/html/all_states.html")
Arch1 <- html_nodes(Archurl,css="#Tabelle35")
Arch <- html_table(Arch1)
Arch
colnames(GermanStates)
GermanURL <- read_html("http://www.experience-germany.com/html/all_states.html")
German1 <- html_nodes(GermanURL,css="#Tabelle35")
GermanStates <- html_table(German1)
colnames(GermanStates)
rownames(GermanStates)
?colnames
GermanStates <- as.data.frame(GermanStates)
View(GermanStates)
rownames(GermanStates)
colnames(GermanStates)
colnames(GermanStates) <- c("State","Population","Area in square kilometers","Capital")
numPython <-0
GermanStates[,2]
GermanStates[2,]
GermanStates[3,]
GermanStates <- GermanStates[3:15,]
View(GermanStates)
rownames(GermanStates) <- 1:13
GermanStates$AreaPerPerson <- GermanStates$`Area in square kilometers`/GermanStates$Population
str(GermanStates)
?gsub
GermanStates$`Area in square kilometers` <- gsub(",","",GermanStates$`Area in square kilometers`)
GermanStates$Population <- gsub(",","",GermanStates$Population)
GermanStates$`Area in square kilometers` <- as.numeric(GermanStates$`Area in square kilometers`)
GermanStates$Population <- as.numeric(GermanStates$Population)
GermanStates$AreaPerPerson <- GermanStates$`Area in square kilometers`/GermanStates$Population
GermanStates$PopPerSquareKilometer <- GermanStates$Population/GermanStates$`Area in square kilometers`/
View(GermanStates)
GermanStates$PopPerSquareKilometer <- GermanStates$Population / GermanStates$`Area in square kilometers`
View(GermanStates)
#1
library("rvest")
apportionmenturl <- read_html("http://apps.saferoutesinfo.org/legislation_funding/state_apportionment.cfm")
app1 <- html_nodes(apportionmenturl,css="table")
app <- html_table(app1)
#2
#gsub("(^[[:space:]]+|[[:space:]]+$)", "", x) <- removes leading/trailing whitespace
str(app)
app[[1]]$`Actual 2005` <- gsub(",","",app[[1]]$`Actual 2005`)
app[[1]]$`Actual 2005` <- gsub("\\$", "" ,app[[1]]$`Actual 2005`)
app[[1]]$`Actual 2005` <- gsub("(^[[:space:]])", "", app[[1]]$`Actual 2005`)
app[[1]]$`Actual 2005` <- as.numeric(app[[1]]$`Actual 2005`)
app[[1]]$`Actual 2006*` <- gsub(",","",app[[1]]$`Actual 2006*`)
app[[1]]$`Actual 2006*` <- gsub("\\$", "" ,app[[1]]$`Actual 2006*`)
app[[1]]$`Actual 2006*` <- gsub("(^[[:space:]])", "", app[[1]]$`Actual 2006*`)
app[[1]]$`Actual 2006*` <- as.numeric(app[[1]]$`Actual 2006*`)
app[[1]]$`Actual 2007` <- gsub(",","",app[[1]]$`Actual 2007`)
app[[1]]$`Actual 2007` <- gsub("\\$", "" ,app[[1]]$`Actual 2007`)
app[[1]]$`Actual 2007` <- gsub("(^[[:space:]])", "", app[[1]]$`Actual 2007`)
app[[1]]$`Actual 2007` <- as.numeric(app[[1]]$`Actual 2007`)
app[[1]]$`Actual 2008` <- gsub(",","",app[[1]]$`Actual 2008`)
app[[1]]$`Actual 2008` <- gsub("\\$", "" ,app[[1]]$`Actual 2008`)
app[[1]]$`Actual 2008` <- gsub("(^[[:space:]])", "", app[[1]]$`Actual 2008`)
app[[1]]$`Actual 2008` <- as.numeric(app[[1]]$`Actual 2008`)
app[[1]]$`Actual 2009` <- gsub(",","",app[[1]]$`Actual 2009`)
app[[1]]$`Actual 2009` <- gsub("\\$", "" ,app[[1]]$`Actual 2009`)
app[[1]]$`Actual 2009` <- gsub("(^[[:space:]])", "", app[[1]]$`Actual 2009`)
app[[1]]$`Actual 2009` <- as.numeric(app[[1]]$`Actual 2009`)
app[[1]]$`Actual 2010` <- gsub(",","",app[[1]]$`Actual 2010`)
app[[1]]$`Actual 2010` <- gsub("\\$", "" ,app[[1]]$`Actual 2010`)
app[[1]]$`Actual 2010` <- gsub("(^[[:space:]])", "", app[[1]]$`Actual 2010`)
app[[1]]$`Actual 2010` <- as.numeric(app[[1]]$`Actual 2010`)0
app[[1]]$`Actual 2011` <- gsub(",","",app[[1]]$`Actual 2011`)
app[[1]]$`Actual 2011` <- gsub("\\$", "" ,app[[1]]$`Actual 2011`)
app[[1]]$`Actual 2011` <- gsub("(^[[:space:]])", "", app[[1]]$`Actual 2011`)
app[[1]]$`Actual 2011` <- as.numeric(app[[1]]$`Actual 2011`)
app[[1]]$`Actual 2012` <- gsub(",","",app[[1]]$`Actual 2012`)
app[[1]]$`Actual 2012` <- gsub("\\$", "" ,app[[1]]$`Actual 2012`)
app[[1]]$`Actual 2012` <- gsub("(^[[:space:]])", "", app[[1]]$`Actual 2012`)
app[[1]]$`Actual 2012` <- as.numeric(app[[1]]$`Actual 2012`)
app[[1]]$`Total` <- gsub(",","",app[[1]]$`Total`)
app[[1]]$`Total` <- gsub("\\$", "" ,app[[1]]$`Total`)
app[[1]]$`Total` <- gsub("(^[[:space:]])", "", app[[1]]$`Total`)
app[[1]]$`Total` <- as.numeric(app[[1]]$`Total`)
#3
prop2005 <- app[[1]]$`Actual 2005` / app[[1]]$`Actual 2005`[52]
prop2006 <- app[[1]]$`Actual 2006*` / app[[1]]$`Actual 2006*`[52]
prop2007 <- app[[1]]$`Actual 2007` / app[[1]]$`Actual 2007`[52]
prop2008 <- app[[1]]$`Actual 2008` / app[[1]]$`Actual 2008`[52]
prop2009 <- app[[1]]$`Actual 2009` / app[[1]]$`Actual 2009`[52]
prop2010 <- app[[1]]$`Actual 2010` / app[[1]]$`Actual 2010`[52]
prop2011 <- app[[1]]$`Actual 2011` / app[[1]]$`Actual 2011`[52]
prop2012 <- app[[1]]$`Actual 2012` / app[[1]]$`Actual 2012`[52]
prop <- rbind(prop2005,prop2006,prop2007,prop2008,prop2009,prop2010,prop2011,prop2012)
colnames(prop) <- c(state.name[1:8],"District of Columbia",state.name[9:50],"Total")
head(prop)
#4
#2005
lowest <- -1
highest <- -1
lowestVal <- 100
highestVal <- 0
for(i in 1:51)
{
if(prop[1,][[i]] < lowestVal){
lowest <- i;
lowestVal <- prop[1,][[i]]
}
if(prop[1,][[i]] > highestVal){
highest <- i
highestVal <- prop[1,][[i]]
}
}
print("Lowest: ")
print(prop[1,][lowest])
print("Highest: ")
print(prop[1,][highest])
#2006
lowest <- -1
highest <- -1
lowestVal <- 100
highestVal <- 0
for(i in 1:51)
{
if(prop[2,][[i]] < lowestVal){
lowest <- i;
lowestVal <- prop[2,][[i]]
}
if(prop[2,][[i]] > highestVal){
highest <- i
highestVal <- prop[2,][[i]]
}
}
print("Lowest: ")
print(prop[2,][lowest])
print("Highest: ")
print(prop[2,][highest])
#2007
lowest <- -1
highest <- -1
lowestVal <- 100
highestVal <- 0
for(i in 1:51)
{
if(prop[3,][[i]] < lowestVal){
lowest <- i;
lowestVal <- prop[3,][[i]]
}
if(prop[3,][[i]] > highestVal){
highest <- i
highestVal <- prop[3,][[i]]
}
}
print("Lowest: ")
print(prop[3,][lowest])
print("Highest: ")
print(prop[3,][highest])
#2008
lowest <- -1
highest <- -1
lowestVal <- 100
highestVal <- 0
for(i in 1:51)
{
if(prop[4,][[i]] < lowestVal){
lowest <- i;
lowestVal <- prop[4,][[i]]
}
if(prop[4,][[i]] > highestVal){
highest <- i
highestVal <- prop[4,][[i]]
}
}
print("Lowest: ")
print(prop[4,][lowest])
print("Highest: ")
print(prop[4,][highest])
#2009
lowest <- -1
highest <- -1
lowestVal <- 100
highestVal <- 0
for(i in 1:51)
{
if(prop[5,][[i]] < lowestVal){
lowest <- i;
lowestVal <- prop[5,][[i]]
}
if(prop[5,][[i]] > highestVal){
highest <- i
highestVal <- prop[5,][[i]]
}
}
print("Lowest: ")
print(prop[5,][lowest])
print("Highest: ")
print(prop[5,][highest])
#2010
lowest <- -1
highest <- -1
lowestVal <- 100
highestVal <- 0
for(i in 1:51)
{
if(prop[6,][[i]] < lowestVal){
lowest <- i;
lowestVal <- prop[6,][[i]]
}
if(prop[6,][[i]] > highestVal){
highest <- i
highestVal <- prop[6,][[i]]
}
}
print("Lowest: ")
print(prop[6,][lowest])
print("Highest: ")
print(prop[6,][highest])
#2011
lowest <- -1
highest <- -1
lowestVal <- 100
highestVal <- 0
for(i in 1:51)
{
if(prop[7,][[i]] < lowestVal){
lowest <- i;
lowestVal <- prop[7,][[i]]
}
if(prop[7,][[i]] > highestVal){
highest <- i
highestVal <- prop[7,][[i]]
}
}
print("Lowest: ")
print(prop[7,][lowest])
print("Highest: ")
print(prop[7,][highest])
#2012
lowest <- -1
highest <- -1
lowestVal <- 100
highestVal <- 0
for(i in 1:51)
{
if(prop[8,][[i]] < lowestVal){
lowest <- i;
lowestVal <- prop[8,][[i]]
}
if(prop[8,][[i]] > highestVal){
highest <- i
highestVal <- prop[8,][[i]]
}
}
print("Lowest: ")
print(prop[8,][lowest])
print("Highest: ")
print(prop[8,][highest])
#5
GermanURL <- read_html("http://www.experience-germany.com/html/all_states.html")
German1 <- html_nodes(GermanURL,css="#Tabelle35")
GermanStates <- html_table(German1)
ArchFront <- read_html("https://www.archlinux.org/")
Arch2 <- html_nodes(ArchFront,css=".pkg-arch , .community")
ArchRecent <- html_text(Arch2)
ArchRecent <- matrix(ArchRecent,nrow=15,byrow=T)
qplot(ArchRecent[,2]) + ggtitle("Recent Releases by platform") + labs(x="Platform",y="Count")
#6
GermanStates <- as.data.frame(GermanStates)
colnames(GermanStates) <- c("State","Population","Area in square kilometers","Capital")
GermanStates <- GermanStates[3:15,]
rownames(GermanStates) <- 1:13
str(GermanStates)
GermanStates$`Area in square kilometers` <- gsub(",","",GermanStates$`Area in square kilometers`)
GermanStates$Population <- gsub(",","",GermanStates$Population)
GermanStates$`Area in square kilometers` <- as.numeric(GermanStates$`Area in square kilometers`)
GermanStates$Population <- as.numeric(GermanStates$Population)
GermanStates$PopPerSquareKilometer <- GermanStates$Population / GermanStates$`Area in square kilometers`
numPython <-0
numHaskell <-0
numPerl <- 0
numLibraries <- 0
for(i in 1:15)
{
if(grepl("py",ArchRecent[,1][i]))
{
numPython <- numPython + 1
}
if(grepl("haskell",ArchRecent[,1][i]))
{
numHaskell <- numHaskell + 1
}
if(grepl("perl",ArchRecent[,1][i]))
{
numPerl <- numPerl + 1
}
if(grepl("lib",ArchRecent[,1][i]))
{
numLibraries <- numLibraries + 1
}
}
print(paste0("Number of Python Files in the top 15 recent archlinux updates: ",numPython))
print(paste0("Number of Haskell Files in the top 15 recent archlinux updates: ",numHaskell))
print(paste0("Number of Perl Files in the top 15 recent archlinux updates: ",numPerl))
print(paste0("Number of Libraries Files in the top 15 recent archlinux updates: ",numLibraries))
#6
ggplot(GermanStates)
?geom_bar
ggplot(GermanStates,aes(State,Population)) + geom_bar()
ggplot(GermanStates,aes(State,Population))
ggplot(GermanStates,aes(State,Population)) + + geom_hist()
ggplot(GermanStates,aes(State,Population)) + + geom_histogram()
ggplot(GermanStates,aes(State,Population)) + geom_histogram()
ggplot(GermanStates,aes(State,Population)) + geom_bar()
ggplot(GermanStates,aes(State,Population)) + geom_line()
ggplot(GermanStates,aes(State,Population)) + geom_count()
ggplot(GermanStates,aes(State,Population)) + geom_bar()
ggplot(GermanStates,aes(State,Population)) + geom_count()
ggplot(GermanStates,aes(State,Population)) + geom_bin2d()
ggplot(GermanStates,aes(State,Population)) + geom_boxplot()
ggplot(GermanStates,aes(State,Population)) + geom_bar(stat = "identity")
ggplot(GermanStates,aes(State,Population)) + geom_bar(stat = "identity") +
geom_bar(data = GermanStates, aes(x = State, y = PopPerSquareKilometer,color="red"))
geom_bar(data = GermanStates, aes(x = State, y = PopPerSquareKilometer,color="red",stat="identity"))
ggplot(GermanStates,aes(State,Population)) + geom_bar(stat = "identity") +
geom_bar(data = GermanStates, aes(x = State, y = PopPerSquareKilometer,color="red",stat="identity"))
ggplot(GermanStates,aes(State,Population)) + geom_bar(stat = "identity") + geom_bar(data = GermanStates, aes(State,PopPerSquareKilometer,color="red",stat="identity"))
ggplot(GermanStates,aes(State,Population)) + geom_bar(stat = "identity") + geom_bar(stat="identity",aes(State,PopPerSquareKilometer,color="red"))
ggplot(GermanStates,aes(State,Population)) + geom_bar(stat = "identity") + geom_bar(stat="identity",aes(State,PopPerSquareKilometer,fill="red"))
ggplot(GermanStates,aes(State,Population)) + geom_bar(stat = "identity",fill="blue") + geom_bar(stat="identity",aes(State,PopPerSquareKilometer,fill="red"))
ggplot(GermanStates,aes(State,Population)) + geom_bar(stat = "identity",fill="blue",alpha=.3) + geom_bar(stat="identity",aes(State,PopPerSquareKilometer,fill="red"))
ggplot(GermanStates,aes(State,Population)) + geom_bar(stat = "identity",fill="blue",alpha=.3) + geom_bar(stat="identity",aes(State,PopPerSquareKilometer),fill="red")
ggplot(GermanStates,aes(State,Population)) + geom_bar(stat = "identity",fill="blue",alpha=.3) + geom_bar(stat="identity",aes(State,PopPerSquareKilometer),fill="red",alpha=.3)
ggplot(GermanStates,aes(State,Population)) + geom_bar(stat = "identity",fill="blue",alpha=.3) + geom_bar(stat="identity",aes(State,PopPerSquareKilometer),fill="red",alpha=.3)
ggplot(GermanStates,aes(State,Population)) + geom_bar(stat = "identity",fill="blue",alpha=.3) + geom_bar(stat="identity",aes(State,PopPerSquareKilometer),fill="green",alpha=.3)
ggplot(GermanStates,aes(State,Population)) + geom_bar(stat = "identity",fill="blue",alpha=.3) + geom_bar(stat="identity",aes(State,PopPerSquareKilometer * 100000),fill="red",alpha=.3)
ggplot(GermanStates,aes(State,Population)) + geom_bar(stat = "identity",fill="blue",alpha=.3) + geom_bar(stat="identity",aes(State,PopPerSquareKilometer * 1000),fill="red",alpha=.3)
ggplot(GermanStates,aes(State,Population)) + geom_bar(stat = "identity",fill="blue",alpha=.3) + geom_bar(stat="identity",aes(State,PopPerSquareKilometer * 100),fill="red",alpha=.3)
ggplot(GermanStates,aes(State,Population)) + geom_bar(stat = "identity",fill="blue",alpha=.3) + geom_bar(stat="identity",aes(State,PopPerSquareKilometer * 800),fill="red",alpha=.3)
ggplot(GermanStates,aes(State,Population)) + geom_bar(stat = "identity",fill="blue",position = "dodge",alpha=.3) + geom_bar(stat="identity",position = "dodge",aes(State,PopPerSquareKilometer * 800),fill="red",alpha=.3)
ggplot(GermanStates,aes(State,Population)) + geom_bar(stat = "identity",fill="blue",position = "dodge",alpha=.3) + geom_bar(stat="identity",position = "dodge",aes(State,PopPerSquareKilometer * 800),fill="red",alpha=.3)
ggplot(GermanStates,aes(State,Population)) + geom_bar(stat = "identity",fill="blue",alpha=.3) + geom_bar(stat="identity",aes(State,PopPerSquareKilometer * 800),fill="red",alpha=.3)
ggplot(GermanStates,aes(State,Population/80620000)) + geom_bar(stat = "identity",fill="blue",alpha=.3) + geom_bar(stat="identity",aes(State,PopPerSquareKilometer * 800),fill="red",alpha=.3)
ggplot(GermanStates,aes(State,Population/80620000)) + geom_bar(stat = "identity",fill="blue",alpha=.3) + geom_bar(stat="identity",aes(State,PopPerSquareKilometer *),fill="red",alpha=.3)
ggplot(GermanStates,aes(State,Population/80620000)) + geom_bar(stat = "identity",fill="blue",alpha=.3) + geom_bar(stat="identity",aes(State,PopPerSquareKilometer),fill="red",alpha=.3)
ggplot(GermanStates,aes(State,Population/80620000)) + geom_bar(stat = "identity",fill="blue",alpha=.3) + geom_bar(stat="identity",aes(State,PopPerSquareKilometer / 609),fill="red",alpha=.3)
numPython <- 0
sum(GermanStates$PopPerSquareKilometer)
ggplot(GermanStates,aes(State,Population/80620000)) + geom_bar(stat = "identity",fill="blue",alpha=.3) + geom_bar(stat="identity",aes(State,PopPerSquareKilometer / 10105.55),fill="red",alpha=.3)
ggplot(GermanStates,aes(State,Population/80620000)) + geom_bar(stat = "identity",fill="blue",alpha=.3) + geom_bar(stat="identity",aes(State,PopPerSquareKilometer / 609.),fill="red",alpha=.3)
ggplot(GermanStates,aes(State,Population/80620000)) + geom_bar(stat = "identity",fill="blue",alpha=.3)
ggplot() + geom_bar(stat="identity",aes(State,PopPerSquareKilometer),fill="red",alpha=.3)
ggplot(GermanStates) + geom_bar(stat="identity",aes(State,PopPerSquareKilometer),fill="red",alpha=.3)
ggplot(GermanStates,aes(State,Population)) + geom_bar(stat = "identity",fill="blue",alpha=.3) + ggtitle("Population per German State")
ggplot(GermanStates) + geom_bar(stat="identity",aes(State,PopPerSquareKilometer),fill="red",alpha=.3) +ggtitle("Population density of each German State")
ggplot(GermanStates,aes(State,Population)) + geom_bar(stat = "identity",fill="blue",alpha=.3) + ggtitle("Population per German State")
ggplot(GermanStates) + geom_bar(stat="identity",aes(State,PopPerSquareKilometer),fill="red",alpha=.3) +ggtitle("Population density of each German State")
library("ggplot2", lib.loc="~/R/win-library/3.3")
ArchFront <- read_html("https://www.archlinux.org/")
Arch2 <- html_nodes(ArchFront,css=".pkg-arch , .community")
ArchRecent <- html_text(Arch2)
ArchRecent <- matrix(ArchRecent,nrow=15,byrow=T)
qplot(ArchRecent[,2]) + ggtitle("Recent Releases by platform") + labs(x="Platform",y="Count")
ArchFront <- read_html("https://www.archlinux.org/")
Arch2 <- html_nodes(ArchFront,css=".pkg-arch , .community")
ArchRecent <- html_text(Arch2)
ArchRecent <- matrix(ArchRecent,nrow=15,byrow=T)
ArchFront <- read_html("https://www.archlinux.org/")
Arch2 <- html_nodes(ArchFront,css=".pkg-arch , .community")
ArchRecent <- html_text(Arch2)
ArchRecent <- matrix(ArchRecent,nrow=15,byrow=T)
#6
ArchRecent <- html_text(Arch2)
ArchRecent
ArchFront <- read_html("https://www.archlinux.org/")
Arch2 <- html_nodes(ArchFront,css=".pkg-arch a , .community , .testing")
ArchRecent <- html_text(Arch2)
ArchRecent <- matrix(ArchRecent,nrow=15,byrow=T)
ArchFront <- read_html("https://www.archlinux.org/")
Arch2 <- html_nodes(ArchFront,css="#pkg-updates")
ArchRecent <- html_text(Arch2)
ArchRecent <- matrix(ArchRecent,nrow=15,byrow=T)
View(ArchRecent)
ArchRecent <- html_text(Arch2)
ArchRecent
ArchRecent[3]
Arch2 <- html_nodes(ArchFront,css=".pkg-arch a , .testing , .community")
ArchRecent <- html_text(Arch2)
ArchRecent
ArchRecent <- matrix(ArchRecent,nrow=15,byrow=T)
ArchFront <- read_html("https://www.archlinux.org/")
Arch2 <- html_nodes(ArchFront,css=".pkg-arch , .pkg-arch a , .testing , .community")
ArchRecent <- html_text(Arch2)
ArchRecent
ArchFront <- read_html("https://www.archlinux.org/")
Arch2 <- html_nodes(ArchFront,css="td")
ArchRecent <- html_text(Arch2)
ArchRecent <- matrix(ArchRecent,nrow=15,byrow=T)
#6
shiny::runApp('GitHub/shinyCollegeScorecard')
library("plotly", lib.loc="~/R/win-library/3.3")
library("DT", lib.loc="~/R/win-library/3.3")
runApp('GitHub/shinyCollegeScorecard')
runApp('GitHub/shinyCollegeScorecard')
runApp('GitHub/shinyCollegeScorecard')
runApp('GitHub/shinyCollegeScorecard')
runApp('GitHub/shinyCollegeScorecard')
runApp('GitHub/shinyCollegeScorecard')
runApp('GitHub/shinyCollegeScorecard')
runApp('GitHub/shinyCollegeScorecard')
runApp('GitHub/shinyCollegeScorecard')
runApp('GitHub/shinyCollegeScorecard')
runApp('GitHub/shinyCollegeScorecard')
runApp('GitHub/shinyCollegeScorecard')
runApp('GitHub/shinyCollegeScorecard')
runApp('GitHub/shinyCollegeScorecard')
runApp('GitHub/shinyCollegeScorecard')
runApp('GitHub/shinyCollegeScorecard')
runApp('GitHub/shinyCollegeScorecard')
